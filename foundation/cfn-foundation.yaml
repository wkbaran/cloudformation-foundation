AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC Foundation with ALB and Dynamic CIDRs'

Parameters:
  SSLCertificateArn:
    Type: String
    Description: ARN of the SSL Certificate to attach to the ALB

  VpcCidr:
    Type: String
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Foundation VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Foundation IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 2, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Foundation Public 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Select [ 1, !Cidr [ !Ref VpcCidr, 2, 8 ]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Foundation Public 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application


Outputs:
  SSLCertificateArn:
    Description: ARN of the SSL Certificate to attach to the ALB
    Value: !Ref SSLCertificateArn
    Export:
      Name: !Sub "${AWS::StackName}-SSLCertArn"

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"

  VPCCidr:
    Description: VPC Cidr
    Value: !Ref VpcCidr
    Export:
      Name: !Sub "${AWS::StackName}-VPCCidr"

  ALBArn:
    Description: Application Load Balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}-ALBArn"

  ALBDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALBDNSName"

  ALBHostedZoneId:
    Description: Application Load Balancer Hosted Zone ID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub "${AWS::StackName}-ALBHostedZoneId"

  ALBSecurityGroupId:
    Description: Application Load Balancer Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ALBSecurityGroupId"

  PublicSubnet1AZ:
    Description: Public Subnet 1 (with NAT Gateway if created) Availability Zone
    Value: !GetAtt PublicSubnet1.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1AZ"

  PublicSubnet1Id:
    Description: Public Subnet 1 (with NAT Gateway if created) Id
    Value: !GetAtt PublicSubnet1.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1AZ"

  PublicSubnet2AZ:
    Description: Public Subnet 2 Availability Zone
    Value: !GetAtt PublicSubnet2.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2AZ"

  PublicSubnet2Id:
    Description: Public Subnet 2 Id
    Value: !GetAtt PublicSubnet1.AvailabilityZone
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1AZ"
