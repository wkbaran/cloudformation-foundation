AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS cluster with single EC2 instance, ALB, EFS'

Parameters:
  PrivateSubnetCIDR:
    Type: String
    Description: CIDR block for the new private subnet

  Region:
    Type: String
    Description: Region to deploy to
    Default: us-west-2

  InetGateway:
    Type: String
    Description: Internet Gateway Id

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues: [ t3.nano, t3.micro, t3.small, t3.medium ]
    Default: t3.nano

Resources:
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true # Remove later
      VpcId: !ImportValue foundation-VPCId
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !ImportValue foundation-PublicSubnet1AZ
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Subnet"

  DefaultPublicRoute: # Remove later
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue foundation-VPCId
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Private Route Table"

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-cluster"

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !ImportValue foundation-VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp # Home ip for debugging; Useless if not public
          FromPort: 22
          ToPort: 22
          CidrIp: 24.117.28.212/32
        - IpProtocol: tcp # AWS EC2 Instance Connect service; Useless if not public
          FromPort: 22
          ToPort: 22
          CidrIp: 18.237.140.160/29
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref ECSInstanceRole]

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECSInstanceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:UpdateContainerInstancesState
                  - ecs:Submit*
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:UpdateInstanceInformation
                Resource: '*'

  SSMServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /service-role/

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AccessSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameters
                Resource: '*'  # Scope this down to specific secrets/parameters as needed
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${AWS::StackName}:*"

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: ami-02fd4e1237c808705  # Amazon ECS-Optimized Amazon Linux 2 AMI @ us-west-2
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y amazon-efs-utils
            yum install -y amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      NewInstancesProtectedFromScaleIn: true
      VPCZoneIdentifier:
        - !Ref PrivateSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ecs-instance
          PropagateAtLaunch: true
        - Key: AmazonECSManaged
          Value: ''
          PropagateAtLaunch: true

  ECSCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: ENABLED
      Name: !Sub ${AWS::StackName}-capacity-provider

  ClusterCapacityProviderAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref ECSCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSCapacityProvider
          Weight: 1

Outputs:
  ECSClusterArn:
    Description: ECS Cluster Arn
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterArn"

  ECSTaskExecutionRoleArn:
    Description: ECSTaskExecutionRole arn
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskExecutionRoleArn"

  ECSSecurityGroupId:
    Description: ECSSecurityGroup Id
    Value: !GetAtt ECSSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-ECSSecurityGroupId"

  PrivateSubnetId:
    Description: The subnet where the ECS cluster was created in
    Value: !GetAtt PrivateSubnet.SubnetId
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetId"
