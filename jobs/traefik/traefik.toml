# Global configuration
global:
  sendAnonymousUsage = true
  checkNewVersion = false

# Log configuration
log:
  level = "TRACE"

# Entry points configuration
entryPoints:
  web:
    address = ":80"
    # Redirect to HTTPS
    http:
      redirections:
        entryPoint:
          to = "websecure"
          scheme = "https"
  
  websecure:
    address = ":443"

# API and dashboard configuration
api:
  dashboard = true

# Provider configuration
providers:
  docker:
    endpoint = "unix:///var/run/docker.sock"
    exposedByDefault = false
    network = "main"

# Certificate resolvers configuration
certificatesResolvers:
  myresolver:
    acme:
      email = "${EMAIL}"
      storage = "/letsencrypt/acme.json"
      dnsChallenge:
        provider = "route53"

# HTTP configuration
http:
  # Dashboard router
  routers:
    dashboard:
      rule = "Host(`jobs.${DOMAIN}`)"
      entryPoints = ["websecure"]
      service = "api@internal"
      tls:
        certResolver = "myresolver"
      middlewares = ["dashboard-ipwhitelist"]
  
    # Wildcard certificate router
    cert-wildcard:
      rule = "Host(`wildcard-cert.${DOMAIN}`)"
      entryPoints = ["websecure"]
      service = "noop@internal"
      tls:
        certResolver = "myresolver"
        domains:
          - main = "${DOMAIN}"
            sans = ["*.${DOMAIN}"]
    
    # FRP webhook router
    frp-webhook:
      rule = "Host(`frp.${DOMAIN}`) && PathPrefix(`/webhook`)"
      entryPoints = ["websecure"]
      service = "frps-service"
      tls:
        certResolver = "myresolver"
    
    # Block non-webhook paths on FRP domain
    frp-block:
      rule = "Host(`frp.${DOMAIN}`)"
      entryPoints = ["websecure"]
      service = "noop@internal"
      middlewares = ["block-non-webhook"]
      tls:
        certResolver = "myresolver"
      priority = 1  # Lower priority than the webhook router
  
  # Middlewares
  middlewares:
    dashboard-ipwhitelist:
      ipWhiteList:
        sourceRange = ["${ADMIN_CIDR}"]
    
    block-non-webhook:
      errors:
        status = ["403"]
        service = "noop@internal"
        query = "Access Denied: Path Not Allowed"
  
  # Services
  services:
    frps-service:
      loadBalancer:
        servers:
          - url = "http://frps:8080"
