services:
  traefik:
    image: "traefik:v3.3.5"
    restart: always
    container_name: traefik
    networks: 
     - main
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/home/ec2-user/traefik/letsencrypt:/letsencrypt"
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=main"
      - "--log.level=TRACE"
      # LetsEncrypt Configuration for wildcard certificate
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=route53"
      - "--global.sendAnonymousUsage"
    ports:
      - "80:80"
      - "443:443"
    environment:
      # AWS Route53 credentials
      - "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
      - "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
      - "AWS_REGION=${AWS_REGION}"
    labels:
      - "traefik.enable=true"
      # Dashboard configuration with wildcard cert
      - "traefik.http.routers.dashboard.rule=Host(`jobs.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.middlewares.dashboard-ipwhitelist.ipwhitelist.sourcerange=${ADMIN_CIDR}"
      - "traefik.http.routers.dashboard.middlewares=dashboard-ipwhitelist"
      
      # HTTP to HTTPS redirect
      - "traefik.http.routers.dashboard-http.rule=Host(`jobs.${DOMAIN}`)"
      - "traefik.http.routers.dashboard-http.entrypoints=web"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.dashboard-http.middlewares=redirect-to-https"
      
      # Generate wildcard certificate
      - "traefik.http.routers.cert-wildcard.rule=Host(`wildcard-cert.${DOMAIN}`)" 
      - "traefik.http.routers.cert-wildcard.tls.certresolver=myresolver"
      - "traefik.http.routers.cert-wildcard.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.cert-wildcard.tls.domains[0].sans=*.${DOMAIN}"
      - "traefik.http.routers.cert-wildcard.service=noop@internal"
      - "traefik.http.routers.cert-wildcard.entrypoints=websecure"
    
      # Create middlewares for the frp subdomain
      - "traefik.http.middlewares.webhook-path-check.stripprefix.prefixes=/webhook"
      - "traefik.http.middlewares.only-webhook-paths.chain.middlewares=check-webhook-path,webhook-path-check"
      - "traefik.http.middlewares.check-webhook-path.containsregexp.strategy=or"
      - "traefik.http.middlewares.check-webhook-path.containsregexp.regexp=^/webhook.*"
      
      # Apply middleware only to the frp subdomain router
      - "traefik.http.routers.frp.rule=Host(`frp.${DOMAIN}`)"
      - "traefik.http.routers.frp.entrypoints=websecure"
      - "traefik.http.routers.frp.tls=true"
      - "traefik.http.routers.frp.tls.certresolver=myresolver"
      - "traefik.http.routers.frp.service=frp"
      - "traefik.http.routers.frp.middlewares=check-webhook-path@docker"
      - "traefik.http.services.frp.loadbalancer.server.port=8080"
      
      # Error handling - block requests to frp that don't match /webhook
      - "traefik.http.middlewares.block-non-webhook.errors.status=403"
      - "traefik.http.middlewares.block-non-webhook.errors.service=noop@internal"
      - "traefik.http.routers.frp-catch-all.rule=Host(`frp.${DOMAIN}`)"
      - "traefik.http.routers.frp-catch-all.entrypoints=websecure"
      - "traefik.http.routers.frp-catch-all.tls=true"
      - "traefik.http.routers.frp-catch-all.tls.certresolver=myresolver"
      - "traefik.http.routers.frp-catch-all.middlewares=block-non-webhook@docker"
      - "traefik.http.routers.frp-catch-all.service=noop@internal"
      - "traefik.http.routers.frp-catch-all.priority=1"
      - "traefik.http.routers.frp.priority=2"

networks:
  main:
    external: true
