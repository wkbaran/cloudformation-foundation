AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Task Definition for n8n with RDS PostgreSQL backend'

Parameters:
  DomainName:
    Type: String
    Description: The domain name to use for the application

  ImagePath:
    Type: String
    Description: Docker image path

  AppPort:
    Type: Number
    Description: Application port

  EfsMountPath:
    Description: Path to mount EFS volume to on EC2 instances
    Type: String

  EfsFilesystemId:
    Description: Id of EFS data volume
    Type: String

  Environment:
    Type: String
    Description: Environment name (dev, prod, etc)
    Default: dev
    AllowedValues:
      - dev
      - prod

  DatabaseSecretArn:
    Description: Database Secret ARN
    Type: String

  R53HostedZoneId:
    Description: Route 53 Zone Id
    Type: String

  UserPoolId:
    Description: User Pool Id
    Type: String

  UserPoolArn:
    Description: User Pool Arn
    Type: String

  UserPoolDomain:
    Description: User Pool Domain
    Type: String

Resources:
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${AWS::StackName}"
      RetentionInDays: 14

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      VpcId: !ImportValue foundation-VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !ImportValue n8n-ecs-cluster-ECSSecurityGroupId
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFilesystemId
      SubnetId: !ImportValue n8n-ecs-cluster-PrivateSubnetId
      SecurityGroups:
        - !Ref EFSSecurityGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: !Sub "${AWS::StackName}-tg"
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue foundation-VPCId

  ALBIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue n8n-ecs-cluster-ECSSecurityGroupId
      IpProtocol: tcp
      FromPort: !Ref AppPort
      ToPort: !Ref AppPort
      SourceSecurityGroupId: !ImportValue foundation-ALBSecurityGroupId

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}UserPoolClient"
      GenerateSecret: true
      UserPoolId: !Ref UserPoolId
      CallbackURLs:
        - !Sub https://${DomainName}/oauth2/idpresponse
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: "Please log in"
            StatusCode: "401"
      LoadBalancerArn: !ImportValue foundation-ALBArn
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !ImportValue foundation-SSLCertArn

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      ExecutionRoleArn: !ImportValue n8n-ecs-cluster-ECSTaskExecutionRoleArn
      TaskRoleArn: !Ref ECSTaskRole
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Ref ImagePath
          PortMappings:
            - ContainerPort: !Ref AppPort
              HostPort: !Ref AppPort
          MountPoints:
            - SourceVolume: efs-volume
              ContainerPath: !Ref EfsMountPath
          Memory: 256
          Essential: true
          Environment:
            - Name: ECS_VOLUME_PLUGIN_TIMEOUT
              Value: "1m"
            - Name: ECS_AVAILABLE_LOGGING_DRIVERS
              Value: '["json-file","awslogs"]'
          Secrets:
            - Name: DB_POSTGRESDB_DATABASE
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/n8n/${Environment}/DB_POSTGRESDB_DATABASE'
            - Name: DB_POSTGRESDB_HOST
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/n8n/${Environment}/DB_POSTGRESDB_HOST'
            - Name: DB_POSTGRESDB_USER
              ValueFrom: !Sub "${DatabaseSecretArn}:username::"
            - Name: DB_POSTGRESDB_PASSWORD
              ValueFrom: !Sub "${DatabaseSecretArn}:password::"
            - Name: DB_TYPE
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/n8n/${Environment}/DB_TYPE'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Volumes:
        - Name: efs-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref EfsFilesystemId
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED

  ECSService:
    DependsOn: ALBListener  # Add this dependency
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AWS::StackName}-service"
      Cluster: !ImportValue n8n-ecs-cluster-ECSClusterArn
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !ImportValue n8n-ecs-cluster-PrivateSubnetId
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref ALBTargetGroup
      CapacityProviderStrategy:
        - CapacityProvider: !Sub "n8n-ecs-cluster-capacity-provider"  # Make sure this matches your capacity provider name
          Weight: 1
          Base: 1  # This tells ECS to maintain at least one instance

  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !ImportValue foundation-VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !ImportValue foundation-ALBSecurityGroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref R53HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !ImportValue foundation-ALBDNSName
        HostedZoneId: !ImportValue foundation-ALBHostedZoneId

  RDSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue n8n-rds-SecurityGroupId  # The RDS security group
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref ECSTaskSecurityGroup  # The ECS Task security group

  RDSIngressRuleVPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue n8n-rds-SecurityGroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp: 10.0.0.0/16
#      CidrIp: !ImportValue foundation-VPCCidr

  MaintenancePageRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/html
            MessageBody: |
              <!DOCTYPE html>
              <html>
                <head>
                  <title>Maintenance Mode</title>
                  <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding-top: 50px; }
                    h1 { color: #333; }
                    p { color: #666; }
                  </style>
                </head>
                <body>
                  <h1>System Maintenance</h1>
                  <p>The system is currently undergoing maintenance or in power-saving mode.</p>
                  <p>Please try again later.</p>
                </body>
              </html>
            StatusCode: "503"
      Conditions:
        - Field: host-header
          Values:
            - !Ref DomainName
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref ALBListener
      Priority: 50  # Start with higher priority, change to 1 for maintenance mode

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: authenticate-cognito
          AuthenticateCognitoConfig:
            UserPoolArn: !Ref UserPoolArn
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
          Order: 1
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
          Order: 2
      Conditions:
        - Field: host-header
          Values:
            - !Ref DomainName
      ListenerArn: !Ref ALBListener
      Priority: 100

Outputs:
  MaintenanceRuleArn:
    Description: ARN of the maintenance page rule (for CLI usage)
    Value: !Ref MaintenancePageRule
    Export:
      Name: !Sub "${AWS::StackName}-MaintenanceRuleArn"